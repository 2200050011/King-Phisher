#!/usr/bin/python3 -B
# -*- coding: utf-8 -*-
#
#  KingPhisherServer
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import logging
import os
import sys

from king_phisher import startup

def main():
	parser = argparse.ArgumentParser(description='King Phisher Server', conflict_handler='resolve')
	startup.argp_add_server(parser)
	startup.argp_add_wrapper(parser)
	startup.argp_add_default_args(parser)

	arguments, unknown_args = parser.parse_known_args()
	sys_argv = sys.argv
	sys_argv.pop(0)

	if sys.version_info < (3, 4):
		print('[-] the Python version is too old (minimum required is 3.4)')
		return 0
	logger = logging.getLogger('KingPhisher.wrapper')
	logger.setLevel(arguments.loglvl if arguments.loglvl else 'WARNING')
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(arguments.loglvl if arguments.loglvl else 'WARNING')
	console_log_handler.setFormatter(logging.Formatter('%(levelname)-8s %(message)s'))
	logger.addHandler(console_log_handler)

	target_directory = os.path.abspath(os.path.dirname(__file__))
	logger.debug("target diretory: {}".format(target_directory))
	os.environ['PIPENV_VENV_IN_PROJECT'] = os.environ.get('PIPENV_VENV_IN_PROJECT', 'True')
	os.environ['PIPENV_PIPFILE'] = os.environ.get('PIPENV_PIPFILE', os.path.join(target_directory, 'Pipfile'))
	logger.info('checking for the pipenv environment')
	if not startup.which('pipenv'):
		logger.info('installing pipenv')
		results = startup.run_process([sys.executable, '-m', 'pip', 'install', 'pipenv'], cwd=target_directory)
		if results.status:
			sys.stderr.write('the following issue occurred during installation of pipenv:\n')
			sys.stderr.write(results.stdout)
			return results.status
	pipenv_path = startup.which('pipenv')
	logger.debug("pipenv path: {0!r}".format(pipenv_path))
	if not pipenv_path:
		logger.exception('failed to find pipenv')
		return 0

	if arguments.pipenv_install:
		logger.info('installing the pipenv environment')
		results = startup.run_pipenv([pipenv_path, '--site-packages', 'install'], cwd=target_directory)
		if results.status:
			logger.warning("the following error occurred during pipenv environment setup: {}".format(process_output))
			return results.status
		return 0

	if arguments.pipenv_update:
		logger.info('updating the pipenv environment')
		results = startup.run_pipenv(('--site-packages', 'update'), cwd=target_directory)
		if results.status:
			logger.error('failed to update the pipenv environment')
			return results.status
		logger.info('the pipenv environment has been updated')
		return 0

	if not os.path.isdir(os.path.join(target_directory, '.venv')):
		logger.warning('no pre-existing pipenv environment was found, installing it now')
		results = startup.run_pipenv(('--site-packages', 'install'), cwd=target_directory)
		if results.status:
			logger.error('failed to install the pipenv environment')
			return results.status
	logger.debug('pipenv Pipfile: {}'.format(os.environ['PIPENV_PIPFILE']))
	# the blank arg being passed is required for pipenv
	passing_argv = [' ', 'run', os.path.basename(__file__)] + sys_argv

	os.execve(pipenv_path, passing_argv, os.environ)

if __name__ == '__main__':
	sys.exit(main())
