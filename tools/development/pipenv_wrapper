#!/usr/bin/python3 -B
# -*- coding: utf-8 -*-
#
#  KingPhisherVENV.py
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import gc
import logging
import os
import sys
import subprocess

from king_phisher import version

def which(program):
	is_exe = lambda fpath: (os.path.isfile(fpath) and os.access(fpath, os.X_OK))
	for path in os.environ['PATH'].split(os.pathsep):
		path = path.strip('"')
		exe_file = os.path.join(path, program)
		if is_exe(exe_file):
			return exe_file
	if is_exe(program):
		return os.path.abspath(program)
	return None

def argp_add_args(parser, default_root=''):
	"""
	Add standard arguments to a new :py:class:`argparse.ArgumentParser` instance
	Used to add the utilities argparse options to the wrapper for display

	:param parser: The parser to add arguments to.
	:type parser: :py:class:`argparse.ArgumentParser`
	:param str default_root: The default root logger to specify.
	"""
	parser.add_argument('-v', '--version', action='version', version=parser.prog + ' Version: ' + version.version)
	parser.add_argument('-L', '--log', dest='loglvl', choices=('DEBUG', 'INFO', 'WARNING', 'ERROR', 'FATAL'), help='set the logging level')
	parser.add_argument('--logger', default=default_root, help='specify the root logger')
	gc_group = parser.add_argument_group('garbage collector options')
	gc_group.add_argument('--gc-debug-leak', action='store_const', const=gc.DEBUG_LEAK, default=0, help='set the DEBUG_LEAK flag')
	gc_group.add_argument('--gc-debug-stats', action='store_const', const=gc.DEBUG_STATS, default=0, help='set the DEBUG_STATS flag')

	return parser

def main():
	parser = argparse.ArgumentParser(description='King Phisher pipenv wrapper', conflict_handler='resolve')
	parser.add_argument('--env_update', dest='pipenv_update', default=False, action='store_true', help='update pipenv requirments and exit')
	parser.add_argument('--env_install', dest='pipenv_install', default=False, action='store_true', help='install pipenv enviroment and exit')
	if os.path.abspath(__file__).split(os.sep)[-1] == 'KingPhisher':
		kpc_group = parser.add_argument_group('King Phisher client')
		kpc_group.add_argument('-c', '--config', dest='config_file', required=False, help='specify a configuration file to use')
		kpc_group.add_argument('--no-plugins', dest='use_plugins', default=True, action='store_false', help='disable all plugins')
		kpc_group.add_argument('--no-style', dest='use_style', default=True, action='store_false', help='disable interface styling')
	if os.path.abspath(__file__).split(os.sep)[-1] == 'KingPhisherServer':
		kps_group = parser.add_argument_group('King Phisher Server')
		kps_group.add_argument('-f', '--foreground', dest='foreground', action='store_true', default=False, help='run in the foreground (do not fork)')
		kps_group.add_argument('--update-geoip-db', dest='update_geoip_db', action='store_true', default=False, help='update the geoip database and exit')
		kps_group.add_argument('--verify-config', dest='verify_config', action='store_true', default=False, help='verify the configuration and exit')
		kps_group.add_argument('config_file', action='store', help='configuration file to use')
	argp_add_args(parser)

	arguments, unknown_args = parser.parse_known_args()
	sys_argv = sys.argv
	sys_argv.pop(0)

	if sys.version_info < (3, 4):
		print('the Python version is too old (minimum required is 3.4)')
		return 0
	logger = logging.getLogger('KingPhisher.wrapper')
	logger.setLevel(arguments.loglvl if arguments.loglvl else 'WARNING')
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(arguments.loglvl if arguments.loglvl else 'WARNING')
	console_log_handler.setFormatter(logging.Formatter('%(levelname)-8s %(message)s'))
	logger.addHandler(console_log_handler)

	# Default logging stuff honor logging level being passed in
	# set target folder for pipenv virual enviroment and set pipenv environment up
	target_directory = os.path.abspath(os.path.dirname(__file__))
	logger.debug("target diretory: {}".format(target_directory))
	os.environ['PIPENV_VENV_IN_PROJECT'] = os.environ.get('PIPENV_VENV_IN_PROJECT', 'True')
	os.environ['PIPENV_PIPFILE'] = os.environ.get('PIPENV_PIPFILE', str(os.path.join(target_directory, 'Pipfile')))
	os.chdir(target_directory)
	logger.info('checking for pipenv for environment')
	if not which('pipenv'):
		logger.info('pipenv not found installing')
		subprocess.call(['python3', '-m', 'pip', 'install', 'pipenv'])
	pipenv_path = which('pipenv')

	if arguments.pipenv_install:
		logger.warning('installing pipenv environment')
		subprocess.call([pipenv_path, '--site-packages', 'install'])
		logger.info('pipenv environment installation complete exiting')
		return 0

	if arguments.pipenv_update:
		logger.info('updating pipenv environment')
		subprocess.call([pipenv_path, 'update'])
		logger.info('pipenv environment updated')
		return 0

	if not os.path.isdir(os.path.join(target_directory, '.venv')):
		logger.info('no pipenv environment found')
		subprocess.call([pipenv_path, '--site-packages', 'install'])
	logger.debug('pipenv Pipfile: {}'.format(os.environ['PIPENV_PIPFILE']))
	passing_argv = [' ', 'run', os.path.abspath(__file__).split(os.sep)[-1]] + sys_argv
	logger.warning('passing_argv: {}'.format(passing_argv))
	logger.debug('starting king phisher with pipenv')

	os.execve(pipenv_path, passing_argv, os.environ)

if __name__ == '__main__':
	sys.exit(main())
